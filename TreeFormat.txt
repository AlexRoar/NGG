# Tree Format

## Функционал 

- Все математические операции (* / + - Unary_- < > <= >= == != (скобки) ^(pow))
- Переменные одного типа
- Имена переменных:
    Identifier       ::= Identifier[Character {Character | Number}*]
    Number           ::= Number[Digit+]
    Digit            ::= "regexp:[0-9]"
    Character        ::= EngCharacter | '_'
    EngCharacter     ::= "regexp:[a-zA-Z]"

- Переменные могут быть просто задекларированы, а могут быть и задекларированы и  проинициализированы. (var a; var b = 6;)
- Константы - числа, считываются %lg.
- Присваивания переменных. Поддерживание (+= -= *= /=)
- Поддерживание минимум 2-ух областей видимости: глобальная и локальная (для функции)
- Тело программы - объявления функций и переменных.
- Имя главной функции: «main»
- При использовании переменных, они должны быть объявлены до места использования (буквально выше по коду).
- Функции должны быть объявлены до строки первого вызова.
- Функции могут принимать неограниченное, фиксированное число параметров.
- Функция обязана возвращать значение и может участвовать в мат. операциях (ex: a = fact(6) + 69)
- Поддержка if с else, при этом результат условия 0 - ложь, все остальные значения - истина.
- Поддержка цикла while.
- If и while могут быть вложены друг в друга.
- Обязательно присутствие ввода как выражение, возвращающее значение: (ex: a = inp + 23)
- Обязательно присутствие вывода как оператора которое принимает выражение (ex: out 56 + 1 + a < 0)
- Поддержка логических операторов: ||, &&

## Формат Дерева
- У узлов есть тип

| Тип |  | Описание | Левое | Правое |
|:--|:--|:--|:--|:--|
| Link | no | Используется для связки блоков. | any | NULL / Link |
| FuncDecl | str | Связанное значение - имя объявляемой функции | Link | Link |
| Input | no | Узел, запрашивающий у пользователя ввод | NULL | NULL |
| Identifier | str | Имя переменной | NULL | NULL |
| Number | num | Значение | NULL | NULL |
| FuncCall | str | Связанное значение - имя вызываемой функции | Link | NULL |
| ReturnStmt | no |  | Operator / Number / Identifier | NULL |
| AssignExpr | str | Возможные значения: «=» «+=» «-=» «*=» «/=» | Identifier | Operator / Number / Identifier |
| VarDef | str | Связанное значение - имя новой переменной | Operator / Number / Identifier / NULL | NULL |
| Print | no |  | Operator / Number / Identifier | NULL |
| IfStmt | no | У правого левое - положительный исход; у правого правое - ложный исход | Operator / Number / Identifier | LINKER[LINKER; LINKER] |
| WhileStmt | no | | Operator / Number / Identifier | LINKER |
| Operator | str | Возможные значения: «+» «-» «/» «\^» «==» «!=» «<=» «>=» «!=»| Operator / Number / Identifier | Operator / Number / Identifier |


## Формат Файла
### Общий формат
**1 строка:** количество узлов (n)
**n следующих строк:** объявления узлов (разделены \n)
### Объявления узлов
<тип узла> <связанное значение> <номер L> <номер R>

- Ноль нумерация
- Нулевой узел - None. На него ссылаются NULLPTR
- Возможные связанные значения:
	- str ::= &quot;content&quot; 
	- num ::= число (%lg)
	- no ::= @
+++
### Примеры:
```cpp
decl fib(num) {
	if (num <= 1) 
		return 1;
	else
		return fib(num-1) * num;
}

decl main() {
	out fib(input);
}
```

<img src="https://i.ibb.co/xLLtyZt/code.png" alt="code" border="0">