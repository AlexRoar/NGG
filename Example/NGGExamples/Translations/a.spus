
; one_sol_1args function definition (source:2:14)
jmp one_sol_1args_guard
one_sol_1args:
push 1
out
pop
push [rex+0] ; identifier sol
out
pop
ret
one_sol_1args_guard:


; two_sol_2args function definition (source:8:14)
jmp two_sol_2args_guard
two_sol_2args:
push 2
out
pop
push [rex+0] ; identifier sol1
out
pop
push [rex+1] ; identifier sol2
out
pop
ret
two_sol_2args_guard:


; no_sol_0args function definition (source:15:14)
jmp no_sol_0args_guard
no_sol_0args:
push 0
out
pop
ret
no_sol_0args_guard:


; inf_sol_0args function definition (source:20:14)
jmp inf_sol_0args_guard
inf_sol_0args:
push 1
push -1
mul ; 21:14
push 1
mul ; 21:17
out
pop
ret
inf_sol_0args_guard:


; giveYouUp_0args function definition (source:25:14)
jmp giveYouUp_0args_guard
giveYouUp_0args:
in ; input 0:0 
pop [rex+0] ; identifier a
in ; input 0:0 
pop [rex+1] ; identifier b
in ; input 0:0 
pop [rex+2] ; identifier c
; processing if:29:6
push [rex+0] ; identifier a
push 0
eq ; ==
push 0
je lbl_29_6_cont__HBRCK
; incrementing rex for 3
push 3
push rex
add
pop rex
; inc complete

; processing if:30:10
push [rex-2] ; identifier b
push 0
eq ; ==
push 0
je lbl_30_10_else__XHBQE
; processing if:31:14
push [rex-1] ; identifier c
push 0
eq ; ==
push 0
je lbl_31_14_else__VDGIH
call inf_sol_0args
push rax ; pushing return value
; decrementing rex for 3
push rex
push 3
sub
pop rex
; dec complete

pop rax ; return value
ret
jmp lbl_31_14_cont__PBVFQ
lbl_31_14_else__VDGIH:
call no_sol_0args
push rax ; pushing return value
; decrementing rex for 3
push rex
push 3
sub
pop rex
; dec complete

pop rax ; return value
ret
lbl_31_14_cont__PBVFQ:
jmp lbl_30_10_cont__AFMCD
lbl_30_10_else__XHBQE:
push 1
push -1
mul ; 37:52
push [rex-1] ; identifier c
mul ; 37:55
push [rex-2] ; identifier b
div ; 37:60
pop [rex+0] ; preparing arg for func call
call one_sol_1args
push rax ; pushing return value
; decrementing rex for 3
push rex
push 3
sub
pop rex
; dec complete

pop rax ; return value
ret
lbl_30_10_cont__AFMCD:
; decrementing rex for 3
push rex
push 3
sub
pop rex
; dec complete

lbl_29_6_cont__HBRCK:
push [rex+1] ; identifier b
push [rex+1] ; identifier b
mul ; 40:26
push 4
push [rex+0] ; identifier a
push [rex+2] ; identifier c
mul ; 40:41
mul ; 40:36
sub ; 40:31
pop [rex+3] ; identifier diskr
; processing if:41:6
push [rex+3] ; identifier diskr
push 0
gr ; >
push 0
je lbl_41_6_else__JTNDV
; incrementing rex for 4
push 4
push rex
add
pop rex
; inc complete

push [rex-1] ; identifier diskr
push 2
pow ; 42:24
pop [rex-1] ; identifier diskr
push [rex-1] ; identifier diskr
push [rex-3] ; identifier b
sub ; 43:54
push 2
push [rex-4] ; identifier a
mul ; 43:64
div ; 43:59
pop [rex+0] ; preparing arg for func call
push 1
push -1
mul ; 43:72
push [rex-1] ; identifier diskr
mul ; 43:75
push [rex-3] ; identifier b
sub ; 43:84
push 2
push [rex-4] ; identifier a
mul ; 43:94
div ; 43:89
pop [rex+1] ; preparing arg for func call
call two_sol_2args
push rax ; pushing return value
; decrementing rex for 4
push rex
push 4
sub
pop rex
; dec complete

pop rax ; return value
ret
; decrementing rex for 4
push rex
push 4
sub
pop rex
; dec complete

jmp lbl_41_6_cont__BCITC
lbl_41_6_else__JTNDV:
; incrementing rex for 4
push 4
push rex
add
pop rex
; inc complete

; processing if:45:10
push [rex-1] ; identifier diskr
push 0
eq ; ==
push 0
je lbl_45_10_else__RUTSN
push 1
push -1
mul ; 46:52
push [rex-3] ; identifier b
mul ; 46:55
push 2
push [rex-4] ; identifier a
mul ; 46:65
div ; 46:60
pop [rex+0] ; preparing arg for func call
call one_sol_1args
push rax ; pushing return value
; decrementing rex for 4
push rex
push 4
sub
pop rex
; dec complete

pop rax ; return value
ret
jmp lbl_45_10_cont__HIBAF
lbl_45_10_else__RUTSN:
call no_sol_0args
push rax ; pushing return value
; decrementing rex for 4
push rex
push 4
sub
pop rex
; dec complete

pop rax ; return value
ret
lbl_45_10_cont__HIBAF:
; decrementing rex for 4
push rex
push 4
sub
pop rex
; dec complete

lbl_41_6_cont__BCITC:
ret
giveYouUp_0args_guard:

mov rex 0
call giveYouUp_0args
hlt

